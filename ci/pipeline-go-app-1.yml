################################################################################
# REFERENCES
# ConcourseCI Docs: https://concourse.ci
# Concourse tutorial: https://github.com/starkandwayne/concourse-tutorial
#
# NOTES
# This file is a self-contained description of a Concourse CI pipeline
# to deploy a http://gosparta.io application.  There's a couple of things to
# note:
#   - The YAML uses node references so that scripts can be defined in the
#     CONSTANTS key and referenced in the jobs section
#   - This requires an additional YML file that defines AWS credentials and the
#     S3 bucket that should be used for storage. Required keys:
#       s3-bucket: XXXXXX
#       s3-access-key-id: XXXXXXXXXXXXXXXXXX
#       s3-secret-access-key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#
resource_types:
  - name: gcs-resource
    type: docker-image
    source:
      repository: frodenas/gcs-resource

################################################################################
# RESOURCES
################################################################################
resources:
- name: simple-go-webapp-source
  type: git
  source:
    uri: https://github.com/tryggth/concourse-example
    paths: [app]

- name: app-version
  type: semver
  source:
    branch: version
    driver: git
    file: app-version
    initial_version: 0.0.1
    password: {{git-password}}
    uri: https://github.com/tryggth/concourse-example.git
    username: tryggth

- name: SourceArchive
  type: gcs-resource
  source:
      bucket: concourse-demo
      json_key: {{gcs-storage}}
      regexp: simple-go-webapp-source-(.*).tgz

- name: BinaryArchive
  type: gcs-resource
  source:
      bucket: concourse-demo
      json_key: {{gcs-storage}}
      regexp: simple-go-webapp-app-(.*)

################################################################################
# JOBS
################################################################################
jobs:
  - name: Package
    serial_groups: [app-version]
    plan:
    - get: simple-go-webapp-source
      trigger: true
    - get: app-version
      params:
        bump: patch
    - task: package
      config:
        << : *CONFIG
        inputs:
          - name: simple-go-webapp-source
          - name: app-version
        run:
          path: sh
          args:
          - -exc
          - *PACKAGE_SCRIPT
        outputs:
          - name: build
    - put: SourceArchive
      params:
        file: build/simple-go-webapp-source-*.tgz*
    - put: app-version
      params:
        file: app-version/number

  - name: UnitTest
    plan:
    - get: SourceArchive
      passed: [Package]
      trigger: true
    - task: unit-test
      config:
        << : *CONFIG
        inputs:
          - name: SourceArchive
        run:
          path: sh
          args:
          - -exc
          - *UNIT_TEST_SCRIPT

  - name: Build
    plan:
    - get: SourceArchive
      passed: [UnitTest]
      trigger: true
    - get: app-version
    - task: build
      config:
        << : *CONFIG
        inputs:
          - name: app-version
          - name: SourceArchive
        run:
          path: bash
          args:
          - -exc
          - *BUILD_SCRIPT
        outputs:
        - name: build
    - put: BinaryArchive
      params:
        file: build/simple-go-webapp-source-app-*

################################################################################
# CONSTANTS
################################################################################
CONSTANTS:
  - CONFIG: &CONFIG
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: '1.7'
  - PACKAGE_SCRIPT: &PACKAGE_SCRIPT |
        cd app-version
          SEM_NUMBER=`cat number`
          SEM_VERSION=`cat version`
          echo "SEM_NUMBER=$SEM_NUMBER, SEM_VERSION=$SEM_VERSION"
        cd ..

        cd simple-go-webapp-source
          if [ ! -d ./vendor ]
            then
              echo "./vendor does not exist - fetching packages"
              go get -d -v ./...
              ls -la $GOPATH/src
              # Move the $GOPATH/src contents into /.vendor
              mv  $GOPATH/src ./vendor
          fi
        cd ..

        mkdir -pv build

        # TAR everything up...
        OUTPUT_FILE="./build/simple-go-webapp-source-$SEM_NUMBER.tgz"
        tar -zcf $OUTPUT_FILE --exclude=".git" ./simple-go-webapp-source

  - UNIT_TEST_SCRIPT: &UNIT_TEST_SCRIPT |
      tar -xf ./SourceArchive/*.tgz
      mv ./simple-go-webapp-source $GOPATH/src
      cd  $GOPATH/src/simple-go-webapp-source/app
      go test -v .

  - BUILD_SCRIPT: &BUILD_SCRIPT |
      cd app-version
        SEM_NUMBER=`cat number`
        SEM_VERSION=`cat version`
        echo "SEM_NUMBER=$SEM_NUMBER, SEM_VERSION=$SEM_VERSION"
      cd ..

      tar -xf ./SourceArchive/*.tgz
      mv ./simple-go-webapp-source $GOPATH/src
      pushd $GOPATH/src/simple-go-webapp-source/app
      go build -o app .
      popd
      OUTPUT_FILE="./build/simple-go-webapp-app-$SEM_NUMBER"
      cp $GOPATH/src/simple-go-webapp-source/app/app $OUTPUT_FILE
